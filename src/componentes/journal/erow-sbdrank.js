import { createContext, useContext, useEffect, useMemo, useState } from "react";
import { JOwnerContext } from "../../pages/journal-context";
import { JDayContext } from "./jday-context";
import RatingComponent from '@material-ui/lab/Rating';
import { AsciiSpinner } from "../ascii-spinner";
import { Alert } from "@material-ui/lab";
import { Box, Button, Divider } from "@material-ui/core";
import { OpenConfirmModal } from "../Dialog";
import { MENU } from "../main-menu";
import { useSBDStatsLazyHook } from "../../data/sbd-stats-hooks";
import { useGetSession, useReactiveSetting } from "../../session/session-handler";
import WeightValue from "../weight-value";
import HelpOutlineIcon from '@material-ui/icons/HelpOutline';
import { BrowserView, MobileView } from "react-device-detect";
import StarRateIcon from '@material-ui/icons/StarRate';
const TYPES = ["SQ","BP","DL"];
const SBDRankContext = createContext({
    isBeingUsed:()=>{}
});

const RealisticGoodMaxes = [
    [180,100], //SQ
    [120,80], //BP
    [200,140] //DL
]

const Rating = ({ ...props }) => {
    return <>
        <MobileView>
                <div style={{ display:"flex", alignItems:"center", marginRight:10}}>
                <StarRateIcon fontSize="small"/> <span style={{ fontSize:12 }}>{ props.defaultValue.toFixed(1) }</span>
                </div>
        </MobileView>
        <BrowserView>
            <RatingComponent {...props}/>
        </BrowserView>
    </>
}

export const SetSBDRank = ({ weight, isf, bw, type })=>{

    const user          = useGetSession();
    const rankType      = useReactiveSetting( user.userSettings?.rankSetType ); 
    const $type         = rankType ?? 0;
    const sbdContext    = useContext(SBDRankContext);
 
    if( $type>0 )
    {
        return <SetSBDRankPro weight={weight} isf={isf} bw={bw} type={type} />
    }
    else
    { 
 
        const typeIndex = TYPES.indexOf(type) ;

        if( typeIndex>-1 )
        {
            const percent = weight / RealisticGoodMaxes[typeIndex][ isf? 1 : 0 ]; 
 

            setTimeout(()=>sbdContext && sbdContext.isBeingUsed($type), 0);

            return <Rating name="half-rating-read" size="small" defaultValue={ percent*5 } precision={0.5} readOnly/> 
        }
        
        return "";
    }

};



export const SetSBDRankPro = ({ weight, isf, bw, type })=>{

    const jowner    = useContext(JOwnerContext);
    const jday      = useContext(JDayContext);
    const typeIndex = TYPES.indexOf(type);
    const enabled   = typeIndex>-1;
    const sbdContext = useContext(SBDRankContext);

    const [loadSbdStats, { data, loading, error }]  = useSBDStatsLazyHook();

    if(!bw) bw = jday?.bw;
    if(!isf) isf = jowner?.isf;

    useEffect(()=>{

        if( enabled )
        {
            loadSbdStats();
        }

    }, [enabled]);


    if( !enabled || error ) return "";

    if( loading ) return <AsciiSpinner label={""} styles={{ display:"inline-block"}}/>;

    if( data?.sbdStats )
    {
        // same gender and weight class
        const wclasses      = data.filterWeightClasses(bw, isf);
        const result        = data.getScoreFor( wclasses, typeIndex, weight );  

        if( result.percent<0.05 ) {
            return "";
        }

        sbdContext && sbdContext.isBeingUsed(1);

        return <Rating name="half-rating-read" size="small" defaultValue={ result.percent * 5 } precision={0.5} readOnly/> 
    }

    return "";
}

export const SBDRankLeyend = ({ children })=>{

    const user          = useGetSession();
    const [show, setShow] = useState(false);
    const menuItem = useMemo(()=>MENU.find(itm=>itm.goto=="/sbd-stats"),[]);

    const explainToUser = ()=>OpenConfirmModal({ open:true
        , title:menuItem.label
        , info: <div>

                    { show===1 && <>
                        <Alert severity="info">
                        This score compares against the 1RM of athletes in a competition at the highest peak of their training. Athletes that train for the squat, bench and deadlift as a sport. So if you don't fit that profile, don't feel bad if your score is low.
                    </Alert>
                    <br/>
                    Squat, Bench and Deadlift exercises (or tagged with #sq, #bp or #dl) are compared against the <a href="https://www.openpowerlifting.org/" target="_blank">openpowerlifting.org</a> database to see how well the estimated 1RM generated by your set compares against the 1RM of powerlifting athletes in competition (obviously not a fair comparition but it serves as a gauge).
                    <br/><br/>
                    We filter, if available, only lifts in your same weight class and same gender. If you don't type your bodyweight in the log, then it will be compared against all weight classes of your same gender.
                    </>}

                    { show===0 && <>
                        <Alert severity="info">
                        This score was defined by the admin, based on 20+ years of gym culture experience based on observation of the most common weights used.
                        </Alert>
                        <br/>
                        Squat, Bench and Deadlift exercises (or tagged with #sq, #bp or #dl) are compared against the most realistic weight a normal person that goes to the gym will achieve, regardless of bodyweight, without entering the athlete zone of focus. These are maxes that can be achieved while having a 9 to 5 job, family and a normal to poor diet, just by being a little bit consistent in the gym training. But still, reaching them is somewhat hard, and if you do, you are indeed above the average of the people walking the streets (if non athletes)
                        <br/><br/>
                        If the gender of the user is not available, male will be assumed.
                        <br/>
                        <Divider/>
                        <br/>
                        {TYPES.map( (t,i)=><Box padding={2}>
                            {t} / Male: <WeightValue value={RealisticGoodMaxes[i][0]} inkg={true}/> / Female: <WeightValue value={RealisticGoodMaxes[i][1]} inkg={true}/>
                        </Box>)}
                        </>}
                    
                </div>
        , verb: "Ok, got it" 
        , canCancel: false
    }); 

    useEffect(()=>{
        setShow(false);
    },[])
    
    const setMode = newMode => {
        user.userSettings?.rankSetType(newMode);
    }


    return <SBDRankContext.Provider value={{ isBeingUsed:($type)=>setShow($type) }}> 
                { children }
                { (typeof show == 'number') && <Alert severity="info" icon={<menuItem.Icon/>} action={

                            show===0 ? <Button size="small" variant="outlined" onClick={()=>setMode(1)}>Switch to Athlete Rank</Button>
                            : <Button size="small" variant="outlined" onClick={()=>setMode(0)}>Switch to Normal Gym Rank</Button>
                                
                            }>
                                { show===1 && <a href={menuItem.goto}><strong>{menuItem.label}</strong></a> }
                                { show===0 && <a href="#" onClick={e=>e.preventDefault() || explainToUser()}><strong>Normal Gym Rank</strong></a> } 
                                &nbsp;is being used.&nbsp;
                                <Button color="inherit" size="small" variant="outlined" onClick={explainToUser} startIcon={<HelpOutlineIcon/>}>
                                    What is this?
                                </Button> 
                                </Alert>
                                
                                }
           </SBDRankContext.Provider>

}